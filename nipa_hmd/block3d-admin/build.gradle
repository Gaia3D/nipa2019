// gradle build -Pprofile=real (or real, dev)
final String DEFAULT_PROFILE = 'local'

buildscript {
	ext {
		springBootVersion = '2.1.2.RELEASE'
        lombokVersion = '1.18.4'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'
// command prompt �뿉�꽌 gradlew htmlDependencyReport 瑜� �떎�뻾�븯硫� hierarchy dependency瑜� html �뙆�씪濡� �깮�꽦�빐 以�
apply plugin: 'project-report'

war {
    baseName = 'block3d-admin'
    version = '0.0.1-SNAPSHOT'
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}
compileJava.options.encoding = 'UTF-8'

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
}

sourceSets {
    main {
        resources {
            if (!project.hasProperty('profile') || !profile) {
                println " ========== > default profile is local. "
                ext.profile = DEFAULT_PROFILE
            }

            if (profile == 'real') {
                println " ===========> profile file is ${profile}"
                println " ===========> copy from src/main/resources/real to src/main/resources"

                copy {
                    from("src/main/resources/real") {
                        include 'application.properties'
                        include 'hmd.properties'
                        include 'logback-spring.xml'
                    }
                    into "src/main/resources"
                }
                exclude "**/dev/*"
            } else if (profile == 'dev') {
                println " ===========> profile file is ${profile}"
                println " ===========> copy from src/main/resources/dev to src/main/resources"

                copy {
                    from("src/main/resources/dev") {
                        include 'application.properties'
                        include 'hmd.properties'
                        include 'logback-spring.xml'
                    }
                    into "src/main/resources"
                }
                exclude "**/real/*"
            } else {
                println " ===========> profile file is ${profile}"
                //srcDir "src/main/resources"
                exclude "**/real/*"
                exclude "**/dev/*"
            }
        }
    }
}

test {
    //ignoreFailures = true
    exclude '**/*'
}

dependencies {
    implementation project(':common')
    implementation project(':common-3d')

    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
    implementation('org.springframework.security:spring-security-core')
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    //implementation 'org.springframework.boot:spring-boot-starter-jta-atomikos'
    //implementation 'pl.allegro.tech.boot:handlebars-spring-boot-starter:0.3.1'
    //implementation 'com.github.jknack:handlebars-helpers:4.1.2'
    //implementation 'org.springframework.boot:spring-boot-starter-hateoas:2.1.2.RELEASE'

    // nashorn handlebar �꽕�젙�쓣 �븯�뒗 寃쎌슦
    //implementation 'org.webjars:handlebars:4.0.11-1'

    implementation 'org.apache.taglibs:taglibs-standard-jstlel:1.2.5'

    implementation 'org.apache.commons:commons-exec:1.3'
    implementation 'org.apache.commons:commons-compress:1.18'
    implementation 'org.apache.httpcomponents:httpclient'

    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    runtimeOnly('org.postgresql:postgresql')
    runtimeOnly 'org.zenframework.z8.dependencies.commons:ojdbc6:2.0'

    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
    testCompileOnly("org.projectlombok:lombok:$lombokVersion")

    testImplementation('org.springframework.boot:spring-boot-starter-test')

    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
    providedRuntime('org.apache.tomcat.embed:tomcat-embed-jasper')
}